{
  "Mappings": {
    "RegionMapping": {
      "us-east-1": {
        "locationServiceRegion": "us-east-1"
      },
      "us-east-2": {
        "locationServiceRegion": "us-east-2"
      },
      "us-west-2": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-southeast-1": {
        "locationServiceRegion": "ap-southeast-1"
      },
      "ap-southeast-2": {
        "locationServiceRegion": "ap-southeast-2"
      },
      "ap-northeast-1": {
        "locationServiceRegion": "ap-northeast-1"
      },
      "eu-central-1": {
        "locationServiceRegion": "eu-central-1"
      },
      "eu-north-1": {
        "locationServiceRegion": "eu-north-1"
      },
      "eu-west-1": {
        "locationServiceRegion": "eu-west-1"
      },
      "sa-east-1": {
        "locationServiceRegion": "us-east-1"
      },
      "ca-central-1": {
        "locationServiceRegion": "us-east-1"
      },
      "us-west-1": {
        "locationServiceRegion": "us-west-2"
      },
      "cn-north-1": {
        "locationServiceRegion": "us-west-2"
      },
      "cn-northwest-1": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-south-1": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-northeast-3": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-northeast-2": {
        "locationServiceRegion": "us-west-2"
      },
      "eu-west-2": {
        "locationServiceRegion": "eu-west-1"
      },
      "eu-west-3": {
        "locationServiceRegion": "eu-west-1"
      },
      "me-south-1": {
        "locationServiceRegion": "ap-southeast-1"
      }
    }
  },
  "Parameters": {
    "authuserPoolGroupsgeofenceAdminGroupRole": {
      "Type": "String"
    },
    "authgeofencecontrolmap77dc1a87UserPoolId": {
      "Type": "String"
    },
    "collectionName": {
      "Type": "String"
    },
    "dataProvider": {
      "Type": "String"
    },
    "pricingPlan": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    },
    "isDefault": {
      "Type": "String"
    }
  },
  "Resources": {
    "CustomGeofenceCollectionLambdaServiceRole9040D551": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "CustomGeofenceCollectionLambdaServiceRoleDefaultPolicy0A18B369": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "geo:CreateGeofenceCollection",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "geo:UpdateGeofenceCollection",
                "geo:DeleteGeofenceCollection"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:geo:${region}:${account}:geofence-collection/${collectionName}",
                  {
                    "region": {
                      "Fn::FindInMap": [
                        "RegionMapping",
                        {
                          "Ref": "AWS::Region"
                        },
                        "locationServiceRegion"
                      ]
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "collectionName": {
                      "Fn::Join": [
                        "-",
                        [
                          {
                            "Ref": "collectionName"
                          },
                          {
                            "Ref": "env"
                          }
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomGeofenceCollectionLambdaServiceRoleDefaultPolicy0A18B369",
        "Roles": [
          {
            "Ref": "CustomGeofenceCollectionLambdaServiceRole9040D551"
          }
        ]
      }
    },
    "CustomGeofenceCollectionLambdaCA3D002B": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nexports.handler = async function (event, context) {\n  try {\n    console.log('REQUEST RECEIVED:' + JSON.stringify(event));\n    if (event.RequestType == 'Create') {\n      const params = {\n        CollectionName: event.ResourceProperties.collectionName,\n        PricingPlan: event.ResourceProperties.pricingPlan\n      };\n      if (params.PricingPlan !== 'RequestBasedUsage') {\n        params['PricingPlanDataSource'] = event.ResourceProperties.dataSource;\n      }\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.createGeofenceCollection(params).promise();\n      console.log('create resource response data' + JSON.stringify(res));\n      if (res.CollectionName && res.CollectionArn) {\n        await response.send(event, context, response.SUCCESS, res, params.CollectionName);\n      } else {\n        await response.send(event, context, response.FAILED, res, params.CollectionName);\n      }\n    }\n    if (event.RequestType == 'Update') {\n      const params = {\n        CollectionName: event.ResourceProperties.collectionName,\n        PricingPlan: event.ResourceProperties.pricingPlan\n      };\n      if (params.PricingPlan !== 'RequestBasedUsage') {\n        params['PricingPlanDataSource'] = event.ResourceProperties.dataSource;\n      }\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.updateGeofenceCollection(params).promise();\n      console.log('update resource response data' + JSON.stringify(res));\n      if (res.CollectionName) {\n        await response.send(event, context, response.SUCCESS, res, params.CollectionName);\n      } else {\n        await response.send(event, context, response.FAILED, res, params.CollectionName);\n      }\n    }\n    if (event.RequestType == 'Delete') {\n      const params = {\n        CollectionName: event.ResourceProperties.collectionName\n      };\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.deleteGeofenceCollection(params).promise();\n      console.log('delete resource response data' + JSON.stringify(res));\n      await response.send(event, context, response.SUCCESS, res, params.CollectionName);\n    }\n  } catch (err) {\n    console.log(err.stack);\n    const res = { Error: err };\n    await response.send(event, context, response.FAILED, res, event.ResourceProperties.collectionName);\n    throw err;\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "CustomGeofenceCollectionLambdaServiceRole9040D551",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "Timeout": 300
      },
      "DependsOn": [
        "CustomGeofenceCollectionLambdaServiceRoleDefaultPolicy0A18B369",
        "CustomGeofenceCollectionLambdaServiceRole9040D551"
      ]
    },
    "CustomGeofenceCollection": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomGeofenceCollectionLambdaCA3D002B",
            "Arn"
          ]
        },
        "collectionName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "collectionName"
              },
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "dataSource": {
          "Ref": "dataProvider"
        },
        "pricingPlan": {
          "Ref": "pricingPlan"
        },
        "region": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "locationServiceRegion"
          ]
        },
        "env": {
          "Ref": "env"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "geofenceAdminGeofenceCollectionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "geo:GetGeofence",
                "geo:PutGeofence",
                "geo:BatchPutGeofence",
                "geo:BatchDeleteGeofence",
                "geo:ListGeofences"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:geo:${region}:${account}:geofence-collection/${collectionName}",
                  {
                    "region": {
                      "Fn::FindInMap": [
                        "RegionMapping",
                        {
                          "Ref": "AWS::Region"
                        },
                        "locationServiceRegion"
                      ]
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "collectionName": {
                      "Fn::GetAtt": [
                        "CustomGeofenceCollection",
                        "CollectionName"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              "geofenceAdmin",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "collectionName"
                    },
                    {
                      "Ref": "env"
                    }
                  ]
                ]
              },
              "Policy"
            ]
          ]
        },
        "Roles": [
          {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "authgeofencecontrolmap77dc1a87UserPoolId"
                },
                "geofenceAdminGroupRole"
              ]
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "Name": {
      "Value": {
        "Fn::GetAtt": [
          "CustomGeofenceCollection",
          "CollectionName"
        ]
      }
    },
    "Region": {
      "Value": {
        "Fn::FindInMap": [
          "RegionMapping",
          {
            "Ref": "AWS::Region"
          },
          "locationServiceRegion"
        ]
      }
    },
    "Arn": {
      "Value": {
        "Fn::Sub": [
          "arn:aws:geo:${region}:${account}:geofence-collection/${collectionName}",
          {
            "region": {
              "Fn::FindInMap": [
                "RegionMapping",
                {
                  "Ref": "AWS::Region"
                },
                "locationServiceRegion"
              ]
            },
            "account": {
              "Ref": "AWS::AccountId"
            },
            "collectionName": {
              "Fn::GetAtt": [
                "CustomGeofenceCollection",
                "CollectionName"
              ]
            }
          }
        ]
      }
    }
  }
}